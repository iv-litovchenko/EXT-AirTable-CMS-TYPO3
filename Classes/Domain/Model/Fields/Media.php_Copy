<?php
namespace Litovchenko\AirTable\Domain\Model\Fields;
use Litovchenko\AirTable\Domain\Model\Fields\AbstractField;
use Litovchenko\AirTable\Utility\BaseUtility;

class Media extends AbstractField
{
    /**
     * The magic variable TYPO3 
     * Parameters are described here 
     * @var array
     */
	public static $TYPO3 = [
		'thisIs' 		=> 'BackendField',
		'name' 			=> 'Файлы, изображения',
		'_propertyAnnotations' => [
			'minItems' => 'int',
			'maxItems' => 'int'
		]
	];
	
    const REQPREFIXCURRENTFIELD = 'propmedia_';
    const REQPREFIXCURRENTFIELDATTR = 'attrmedia_';
	
	const TABDEFAULT = 8; // media
	const SECTION = 'mediaFields';
	const EXPORT = false;
	const IMPORT = false;
	
    /**
     * @return string
     */
    public static function databaseDefinitions($model, $table, $field)
    {
        return [$table=>[
			$field => 'int(11) DEFAULT \'0\' NOT NULL'
		]];
    }

    /**
     * @modify array
     */
    public static function buildConfiguration($model, $table, $field)
    {
		$RenderType = BaseUtility::getClassFieldAnnotationValueNew($model,$field,'AirTable\Field',true);
		if($field == 'propmedia_thumbnail'){
			$RenderType = 'image';
		}
		switch(strtolower($RenderType)){
			default:
			case 'file':
			case 'mix':
				// getFileFieldTCAConfig() -> не работало для Eav.FlexForm
				// $GLOBALS['TCA'][$table]['columns'][$field]['config'] = \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::getFileFieldTCAConfig('',[],'','php,php3');
				$GLOBALS['TCA'][$table]['columns'][$field]['config'] = $GLOBALS['TCA']['pages']['columns']['media']['config'];
			break;
			case 'image':
				// getFileFieldTCAConfig() -> не работало для Eav.FlexForm
				// $GLOBALS['TCA'][$table]['columns'][$field]['config'] = \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::getFileFieldTCAConfig('',[],'gif,jpg,jpeg,tif,tiff,bmp,pcx,tga,png,pdf,ai,svg','php,php3');
				$GLOBALS['TCA'][$table]['columns'][$field]['config'] = $GLOBALS['TCA']['tt_content']['columns']['image']['config'];
			break;
		}
		parent::buildConfiguration($model,$table,$field);
		
		$GLOBALS['TCA'][$table]['columns'][$field]['label'] = $GLOBALS['TCA'][$table]['columns'][$field]['label'].' // Fal';
		#$GLOBALS['TCA'][$table]['columns'][$field]['config']['appearance']['headerThumbnail']['width'] = 80;
		#$GLOBALS['TCA'][$table]['columns'][$field]['config']['appearance']['headerThumbnail']['height'] = 100;
		
		// Минимальное кол-во
		$required = BaseUtility::getClassFieldAnnotationValueNew($model,$field,'AirTable\Field\Required');
		if(!empty($required)){
			$GLOBALS['TCA'][$table]['columns'][$field]['config']['minitems'] = 1;
		}
		
		// Минимальное кол-во (2)
		$minitems = BaseUtility::getClassFieldAnnotationValueNew($model,$field,'AirTable\Field\MinItems');
		if(!empty($minitems) && $minitems > 0){
			$GLOBALS['TCA'][$table]['columns'][$field]['config']['minitems'] = $minitems;
		}
		
		// Максимальное кол-во
		$maxitems = BaseUtility::getClassFieldAnnotationValueNew($model,$field,'AirTable\Field\MaxItems');
		if(!empty($maxitems) && $maxitems > 0){
			$GLOBALS['TCA'][$table]['columns'][$field]['config']['maxitems'] = $maxitems;
		}
		
		// -> Сопоставление записи
		// Лишнее поле - с ним не получилось записывать не таблицу, а модель
		unset($GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_table_field']);
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_match_fields'] = [
			// 'table_local' => 'sys_file',
			'tablenames' => $table,
			'fieldname' => $field
		];
    }
	
	// listController func
	public static function listControllerSqlBuilder(&$obj, &$q, $table, $field, $config){
		// $q->addSelect($table.'.'.$field);
		$paramFilter_select = BaseUtility::_POSTuc('form1Apply','form1Field_'.$field,'');
		switch($paramFilter_select){
			case 'F0': $q = $q->has($field, '=', 0); break;
			case 'F1': $q = $q->has($field, '=', 1); break;
			case 'F2': $q = $q->has($field, '=', 2); break;
			case 'F3': $q = $q->has($field, '=', 3); break;
			case 'F4': $q = $q->has($field, '=', 4); break;
			case 'F5': $q = $q->has($field, '=', 5); break;
			case 'F6': $q = $q->has($field, '=', 6); break;
			case 'F7': $q = $q->has($field, '=', 7); break;
			case 'F8': $q = $q->has($field, '=', 8); break;
			case 'F9': $q = $q->has($field, '=', 9); break;
			case 'F10': $q = $q->has($field, '=', 10); break;
			case 'F10+':
				$q = $q->has($field, '>', 10);
			break;
		}
		return $q;
	}
	
	// listController func
	public static function listControllerSqlBuilderWith(&$obj, &$q, $table, $field, $config)
	{
		return $q->with($field);
	}
	
	// listController func
	public static function listControllerSqlBuilderOrder(){
		return false;
	}
	
	// listController func
	public static function listControllerHtmlFilter(&$obj, $table, $field, $config){
		$paramFilter_select = BaseUtility::_POSTuc('form1Apply','form1Field_'.$field,'');
		return '
			<select name="form1Field_'.$field.'" class="form-control btn-sm">
				<option value="" '.($paramFilter_select == ''?'selected':'').'>Любое значение</option>
				<option value="F0" '.($paramFilter_select == 'F0'?'selected':'').'>0 файлов</option>
				<option value="F1" '.($paramFilter_select == 'F1'?'selected':'').'>1 файл</option>
				<option value="F2" '.($paramFilter_select == 'F2'?'selected':'').'>2 файла</option>
				<option value="F3" '.($paramFilter_select == 'F3'?'selected':'').'>3 файла</option>
				<option value="F4" '.($paramFilter_select == 'F4'?'selected':'').'>4 файла</option>
				<option value="F5" '.($paramFilter_select == 'F5'?'selected':'').'>5 файлов</option>
				<option value="F6" '.($paramFilter_select == 'F6'?'selected':'').'>6 файлов</option>
				<option value="F7" '.($paramFilter_select == 'F7'?'selected':'').'>7 файлов</option>
				<option value="F8" '.($paramFilter_select == 'F8'?'selected':'').'>8 файлов</option>
				<option value="F9" '.($paramFilter_select == 'F9'?'selected':'').'>9 файлов</option>
				<option value="F10" '.($paramFilter_select == 'F10'?'selected':'').'>10 файлов</option>
				<option value="F10+" '.($paramFilter_select == 'F10+'?'selected':'').'>Более 10 файлов</option>
			</select>
		';
	}
	
	// listController func
	public static function listControllerHtmlTh(&$obj, $table, $field, $config){
		return \Litovchenko\AirTable\Domain\Model\Fields\Input::listControllerHtmlTh($obj, $table, $field, $config);
	}
	
	// listController func
	public static function listControllerHtmlTd(&$obj, $table, $field, $config, $row, &$uriBuilder){
		$backendLink = \Litovchenko\AirTable\Utility\BaseUtility::getModuleUrl(
			'record_edit', [
				'columnsOnly' => $field,
				'edit['.$table.']['.$row['uid'].']' => 'edit',
				'returnUrl' => \TYPO3\CMS\Core\Utility\GeneralUtility::getIndpEnv('REQUEST_URI')
			]
		);
		
		$fieldInRow = $field;
		$rowArray = [];
		if(isset($row[$fieldInRow][0])){
			if(!empty($row[$fieldInRow])){
				$rowArray = $row[$fieldInRow];
				$rowspan = ' rowspan="'.count($row[$fieldInRow]).'"';
			}
		} else {
			if(!empty($row[$fieldInRow])){
				$rowArray[0] = $row[$fieldInRow];
				$rowspan = '';
			}
		}
		
		$j = 1;
		$content = '';
		foreach($rowArray as $k => $v){
			
			// editLink
			$editLink = '';
			if($j == 1){
				$editIcon = $obj->iconFactory->getIcon('actions-system-pagemodule-open', \TYPO3\CMS\Core\Imaging\Icon::SIZE_SMALL);
				$editLink = '<td width="29" nowrap style="vertical-align: top; padding: 2px; border-left: 0;" '.$rowspan.'>
					<a href="'.$backendLink.'" class="btn btn-default btn-sm" style="width: 25px;">
						'.$editIcon.'
					</a>
				</td>';
			}

			$tdContent1 = '-';
			$conf = end(explode("\\",$config['AirTable.ClassWithSub']));
			if($field == 'propmedia_thumbnail'){
				$conf = 'image';
			}
			switch(strtolower($conf)){
				default:
				case 'file':
					$src = self::FalFilePath($v['uid_local']);
					if(file_exists($GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/'.$src) && $src != null){
						$tdContent1 = $v['uid_local']['name'];
					}
				break;
				case 'image':
					$src = self::FalFilePath($v['uid_local']);
					if(file_exists($GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/'.$src) && $src != null){
						$tdContent1 = '<img src="/'.$src.'" style="width: 150px; border: #ccc 1px solid; background: white; padding: 5px;">';
					}
				break;
				case 'mix':
					$src = self::FalFilePath($v['uid_local']);
					if(file_exists($GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/'.$src) && $src != null){
						if($info = getimagesize($GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/'.$src)){
							$tdContent1 = '<img src="/'.$src.'" style="width: 150px; border: #ccc 1px solid; background: white; padding: 5px;">';
						} else {
							$tdContent1 = $v['uid_local']['name'];
						}
					}
				break;
			}
			
			if($v['deleted'] == 1) {
				$icon = $obj->getIconForRecord('sys_file_reference', $v, \TYPO3\CMS\Core\Imaging\Icon::SIZE_SMALL);
				$content .='
					<tr>
						'.$editLink.'
						<td width="150" nowrap style="vertical-align: top; background: #f00; opacity: 0.5;"><a href="/'.$src.'" target="_blank">'.$tdContent1.'</a></td>
						<td nowrap style="vertical-align: top; border-right: 0; background: #eee;"><nobr><span style="">'.$icon.' R'.$v['uid'].', F'.$v['uid_local']['uid'].' <!--'.$j.'/'.count($row[$fieldInRow]).'--></span></nobr></td>
					</tr>
				';
			} else {
				$icon = $obj->iconFactory->getIconForRecord('sys_file_reference', $v, \TYPO3\CMS\Core\Imaging\Icon::SIZE_SMALL);
				$content .='
					<tr>
						'.$editLink.'
						<td width="150" nowrap style="vertical-align: top; background: #eee;"><a href="/'.$src.'" target="_blank">'.$tdContent1.'</a></td>
						<td nowrap style="vertical-align: top; border-right: 0; background: #eee;"> <nobr><span style="">'.$icon.' R'.$v['uid'].', F'.$v['uid_local']['uid'].' <!--'.$j.'/'.count($row[$fieldInRow]).'--></span></nobr></td>
					</tr>
				';
			}
				
			$j++;
		}
		
		if($content == NULL){
			return '
				<td nowrap style="vertical-align: top; border-right: 0;" nowrap><a href="'.$backendLink.'"><code style="'.STYLE_EMPTY_FIELD.'">Добавить файл</code></a></td>
			';
		} else {
			return '<td style="vertical-align: top; padding: 0; background: #eee;">
				<table class="t3tablerel table table-striped table-bordered table-hover" style="margin-top: -1px; margin-bottom: -1px; border: 0;">
					'.$content.'
				</table>
			</td>';
		}
	}
	
	/**
		$rowArray
		[uid] => 1
		[identifier] => /user_upload/records/tt_content/image/FOTO_-_komandy.jpg
		[storage] => Array
        (
            [uid] => 1
            [configuration] => XML
		)
	*/
	public static function FalFilePath($rowArray = [])
	{
		if(isset($rowArray['storage']['configuration'])){
			$xmlArray = \TYPO3\CMS\Core\Utility\GeneralUtility::xml2array($rowArray['storage']['configuration']);
			$storageFile = $xmlArray['data']['sDEF']['lDEF']['basePath']['vDEF'];
			$basenameFile = $rowArray['identifier'];
		} else {
			$storageFile = '';
			$basenameFile = ltrim($rowArray['identifier'],'/');
		}
		$path = str_replace('//','/',$storageFile.$basenameFile);
		return $path;
	}
	
	// Автоматизированная выборка связей 
	public function refProvider($obj, $class, $field){
		$annotationField = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field');
		$annotationForeignModel = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignModel');
		$annotationForeignKey = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignKey');
		#return $this->hasMany('Litovchenko\AirTable\Domain\Model\SysFileReference', 'uid_foreign', 'uid')
		#	->where('sys_file_reference.tablenames', '=', $class) // BaseUtility::getTableNameFromClass()
		#	->where('sys_file_reference.fieldname', '=', $field)
		#	->orderBy('sys_file_reference.sorting_foreign', 'asc');
		# По имее это тот же самый полиморфизм
		if($annotationField == 'Media_1'){
			return $obj->morphOne(
				'Litovchenko\AirTable\Domain\Model\Fal\SysFileReference',
				$field,
				'tablenames',
				'uid_foreign',
				'uid'
			)
			->where('fieldname', '=', $field)
			->orderBy('sorting_foreign', 'asc')
			->with(['uid_local'=>function($query){
				$query->with(['storage'=>function($query){}]);
				$query->with(['metadata'=>function($query){}]);
			}]);
		} else {
			return $obj->morphMany(
				'Litovchenko\AirTable\Domain\Model\Fal\SysFileReference',
				$field,
				'tablenames',
				'uid_foreign',
				'uid'
			)
			->where('fieldname', '=', $field)
			->orderBy('sorting_foreign', 'asc')
			->with(['uid_local'=>function($query){
				$query->with(['storage'=>function($query){}]);
				$query->with(['metadata'=>function($query){}]);
			}]);
		}
	}
	
	// Создание связей
	public function refAttach($obj, $class, $field, $idTwo = null, $data = []){
		$table = BaseUtility::getTableNameFromClass($class);
		$annotationField = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field');
		// $annotationForeignModel = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignModel');
		// $annotationForeignKey = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignKey');
		
		// *** 
		// Если передан путь // fileadmin/ftpupload/typo3-book-backend-login.png
		// *** 
		if(strstr($idTwo,'.')){
			$resourceFactory = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Core\Resource\ResourceFactory::class); // ::getInstance()
			// $fileObject = $resourceFactory->getFileObject(5);
			// $folder = $storage->getFolder('ftpupload');
			// $storage = $resourceFactory->getDefaultStorage();
			// $file = $storage->getFile($idTwo); // 'ftpupload/typo3-book-backend-login.png'
			
			$file = $resourceFactory->getFileObjectFromCombinedIdentifier($idTwo); // '1:/foo.txt'
			$idTwo = $file->getProperty('uid'); // ->getPublicUrl()
		}
		
		// Выполняем поиск записи в БД...
		// Если такая связь уже существует - ничего не делаем
		$filter = [];
		$filter['select'] = ['uid'];
		$filter['where.10'] = ['tablenames','=',$table];
		$filter['where.20'] = ['fieldname','=',$field];
		$filter['where.30'] = ['uid_foreign','=',$obj->uid];
		$filter['where.40'] = ['uid_local','=',$idTwo];
		$count = \Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recSelect('count',$filter);
		if($count > 0){
			return $obj;
		}
		
		// $filter['withoutGlobalScopes'] = true;
		if($annotationField == 'Media_1'){
			// Удаляем связь...
			$filter = [];
			$filter['where.10'] = ['tablenames','=',$table];
			$filter['where.20'] = ['fieldname','=',$field];
			$filter['where.30'] = ['uid_foreign','=',$obj->uid];
			\Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recDelete($filter);
			
			// Создаем новую связь
			$data = [];
			$data['pid'] = $obj->pid;
			$data['tablenames'] = $table;
			$data['fieldname'] = $field;
			$data['uid_foreign'] = $obj->uid;
			$data['sorting_foreign'] = 0;
			$data['uid_local'] = $idTwo; // ID-файла
			$data['crdate'] = $GLOBALS['EXEC_TIME'];
			$data['tstamp'] = $GLOBALS['EXEC_TIME'];
			\Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recInsert($data);
		} else {
			// Удаляем связь...
			$filter = [];
			$filter['where.10'] = ['tablenames','=',$table];
			$filter['where.20'] = ['fieldname','=',$field];
			$filter['where.30'] = ['uid_foreign','=',$obj->uid];
			$filter['where.40'] = ['uid_local','=',$idTwo]; // ID-файла
			\Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recDelete($filter);
			
			// Создаем новую связь
			$data = [];
			$data['pid'] = $obj->pid;
			$data['tablenames'] = $table;
			$data['fieldname'] = $field;
			$data['uid_foreign'] = $obj->uid;
			// $data['sorting_foreign'] = 0;
			$data['uid_local'] = $idTwo; // ID-файла
			$data['crdate'] = $GLOBALS['EXEC_TIME'];
			$data['tstamp'] = $GLOBALS['EXEC_TIME'];
			\Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recInsert($data);
		}
		
		return $obj;
	}
	
	// Удаление связей
	public function refDetach($obj, $class, $field, $idTwo = null, $data = []){
		$table = BaseUtility::getTableNameFromClass($class);
		$annotationField = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field');
		// $annotationForeignModel = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignModel');
		// $annotationForeignKey = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignKey');
		
		// *** 
		// Если передан путь // fileadmin/ftpupload/typo3-book-backend-login.png
		// *** 
		if(strstr($idTwo,'.')){
			$resourceFactory = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Core\Resource\ResourceFactory::class); // ::getInstance()
			// $fileObject = $resourceFactory->getFileObject(5);
			// $folder = $storage->getFolder('ftpupload');
			// $storage = $resourceFactory->getDefaultStorage();
			// $file = $storage->getFile($idTwo); // 'ftpupload/typo3-book-backend-login.png'
			
			$file = $resourceFactory->getFileObjectFromCombinedIdentifier($idTwo); // '1:/foo.txt'
			$idTwo = $file->getProperty('uid'); // ->getPublicUrl()
		}
		
		// Выполняем поиск записи в БД...
		// Если такая связь уже существует - ничего не делаем
		$filter = [];
		$filter['select'] = ['uid'];
		$filter['where.10'] = ['tablenames','=',$table];
		$filter['where.20'] = ['fieldname','=',$field];
		$filter['where.30'] = ['uid_foreign','=',$obj->uid];
		if(!empty($idTwo)){ // != 'all'
			$filter['where.40'] = ['uid_local','=',$idTwo];
		}
		
		$count = \Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recSelect('count',$filter);
		if($count > 0){
			// Удаляем связи...
			$filter = [];
			$filter['where.10'] = ['tablenames','=',$table];
			$filter['where.20'] = ['fieldname','=',$field];
			$filter['where.30'] = ['uid_foreign','=',$obj->uid];
			if(!empty($idTwo)){ // != 'all'
				$filter['where.40'] = ['uid_local','=',$idTwo]; // ID-файла
			}
			\Litovchenko\AirTable\Domain\Model\Fal\SysFileReference::recDelete($filter);
		}
		return $obj;
	}
}