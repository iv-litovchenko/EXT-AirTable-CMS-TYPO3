<?php
namespace Litovchenko\AirTable\Domain\Model\Fields;
use Litovchenko\AirTable\Domain\Model\Fields\AbstractFieldRelelation;
use Litovchenko\AirTable\Utility\BaseUtility;

/**
 * @AirTable\Label:<Полиморфная связь M:M>
 * @AirTable\Description:<Информация о связи пишется в 4 колонки промежуточной таблицы "sys_mm">
 */
class Rel_Poly_MToM extends AbstractFieldRelelation
{
    const REQPOSTFIXCURRENTFIELD = ''; // _rows
    const REQPOSTFIXFOREIGNFIELD = ''; // _rows
	
    /**
     * @return string
     */
    public static function databaseDefinitions($model, $table, $field)
    {
		$sql = []; // Имеем в виду, что может быть связь "На себя"
		$sql[$table][$field] = 'int(11) DEFAULT \'0\' NOT NULL';
		// $sql[parent::getForeignTableName($model,$field)]['foreign_table'] = 'varchar(255) DEFAULT \'\' NOT NULL';
		// $sql[parent::getForeignTableName($model,$field)]['foreign_field'] = 'varchar(255) DEFAULT \'\' NOT NULL';
		// $sql[parent::getForeignTableName($model,$field)]['foreign_uid'] = 'int(11) DEFAULT \'0\' NOT NULL';
		// $sql[parent::getForeignTableName($model,$field)]['foreign_sortby'] = 'int(11) DEFAULT \'0\' NOT NULL';
		// $sql[parent::getForeignTableName($model,$field)][parent::getForeignFieldName($model,$field)] = 'int(11) DEFAULT \'0\' NOT NULL';
		return $sql;
    }
	
    /**
     * @modify array
     */
    public static function buildConfiguration($model, $table, $field)
    {
		parent::buildConfiguration($model, $table, $field);
		self::buildConfigurationRelation($model, $table, $field);
		
		$GLOBALS['TCA'][$table]['columns'][$field]['label'] = $GLOBALS['TCA'][$table]['columns'][$field]['label'].' // Poly M-M';
	}
	
    /**
     * @return array
     */
    public static function buildConfigurationRelation($model, $table, $field)
    {
		$_foreignModelName = self::getForeignModelName($model, $field); // foreign model
		$_foreignTableName = self::getForeignTableName($model, $field); // foreign table
		
		if(BaseUtility::hasSpecialField(parent::getForeignModelName($model,$field),'sorting') == true
			or parent::getForeignTableName($model,$field) == 'tt_content' // Специально для таблицы "tt_content" - устанавливаем сортировку по полю "sorting"
		){
			$enabledControls_useSortable = 1;
			$enabledControls_dragdrop = 1;
			$enabledControls_sort = 1;
			#$sort = 'sorting';
		} else {
			$enabledControls_useSortable = 0;
			$enabledControls_dragdrop = 0;
			$enabledControls_sort = 0;
			#$sort = '';
		}
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['type'] = 'inline';
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['minitems'] = 0;
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['maxitems'] = 100;
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['behaviour'] = [
			'enableCascadingDelete' => false, // Запрещяем каскадное удаление
		];
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['appearance'] = [
			#'collapseAll' => 1,
			'expandSingle' => 0,
			'newRecordLinkAddTitle' => 1,
			'levelLinksPosition' => 'top',
			'showPossibleLocalizationRecords' => 0,
			'showRemovedLocalizationRecords' => 0,
			'showAllLocalizationLink' => 0,
			'showSynchronizationLink' => 0,
			'useSortable' => $enabledControls_useSortable,
			'enabledControls' => [
				'info' => 1,
				'new' => 1,
				'dragdrop' => $enabledControls_dragdrop,
				'sort' => $enabledControls_sort,
				'hide' => 1,
				'delete' => 1,
				'localize' => 0
			]
		];
		
		// -> Общие указания
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_table'] = 'sys_mm';
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_field'] = 'uid_local';
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_sortby'] = 'sorting';
		
		// -> Селектор (кнопка "Обзор")
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_unique'] = 'uid_foreign'; // Позволяет выбирать запись только 1 раз
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_label'] = 'uid_foreign';
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_selector'] = 'uid_foreign';
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['appearance']['useCombination'] = true;
		
		// -> Сопоставление записи
		// Лишнее поле - с ним не получилось записывать не таблицу, а модель
		unset($GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_table_field']);
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['foreign_match_fields'] = [
		 	'tablename' => $table,
		 	'fieldname' => $field
		];
		
		// -> Переписываем TCA "sys_mm"
		$GLOBALS['TCA'][$table]['columns'][$field]['config']['overrideChildTca'] = [
			'columns' => [
				'uid_local' => [
					'config' => [
						'type' => 'select',
						'renderType' => 'selectSingle',
						'foreign_table' => $table,
					]
				],
				'uid_foreign' => [
					'config' => [
						'type' => 'select',
						'renderType' => 'selectSingle',
						'foreign_table' => $_foreignTableName,
					]
				]
			],
			'types' => [
				0 => [
					// 'showitem' => ''
				]
			]
		];
		
    }
	
    /**
     * @modify array
     */
    public static function postBuildConfiguration($model, $table, $field)
    {
		#print "<pre>";
		#print_r($GLOBALS['TCA']['tx_air_table_examples2_testfal']['columns']['field_falfile']);
		#exit();
		
		// Добавляем информацию в таблицу "sys_mm"
		#$tableLabel = BaseUtility::getClassAnnotationValueNew($model,'AirTable\Label');
		#$GLOBALS['TCA']['sys_mm']['columns']['tablename']['config']['items'][$model] = [0=>$tableLabel,1=>$model];
		
		#if(BaseUtility::hasSpecialField(parent::getForeignModelName($model,$field),'Litovchenko\AirTable\Domain\Model\Traits\RelPolyInverse') == true){
		#	$tableLabel = BaseUtility::getClassAnnotationValueNew($model,'AirTable\Label');
		#	$GLOBALS['TCA'][parent::getForeignTableName($model,$field)]['columns']['foreign_table']['config']['items'][$model] = [
		#		0=>$tableLabel,
		#		1=>$model
		#	];
		#}
	}
	
	// Автоматизированная выборка связей 
	public function refProvider($obj, $class, $field){
		$annotationForeignModel = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignModel');
		$annotationForeignKey = BaseUtility::getClassFieldAnnotationValueNew($class,$field,'AirTable\Field\ForeignKey');
		$fieldSort = $GLOBALS['TCA'][BaseUtility::getTableNameFromClass($annotationForeignModel)]['ctrl']['sortby'];
		return $obj->morphMany($class,'uid','uid','uid','uid');
		if($fieldSort != ''){
			# morphedByMany(
			#	$related, 					// 1
			#	$name, 						// 2
			#	$table = null, 				// 3
			#	$foreignPivotKey = null,	// 4
			#	$relatedPivotKey = null, 	// 5
			#	$parentKey = null,  		// 6
			#	$relatedKey = null,  		// 7
			#	$relationName = null		// 8
			#	$inverse = false			// 9
			#)
			#return $obj->morphedByMany(
			#	$annotationForeignModel,			// 1
			#	'tablename',						// 2
			#	'sys_mm',							// 3
			#	'uid_local',						// 4
			#	'uid_foreign',						// 5
			#	'uid',								// 6
			#	'fefew'								// 7
			#);#->where('foreign_field', '=', $field)
			#	->orderBy($fieldSort,'asc');
		} else {
			# morphedByMany(
			#	$related, 					// 1
			#	$name, 						// 2
			#	$table = null, 				// 3
			#	$foreignPivotKey = null,	// 4
			#	$relatedPivotKey = null, 	// 5
			#	$parentKey = null,  		// 6
			#	$relatedKey = null,  		// 7
			#	$relationName = null		// 8
			#	$inverse = false			// 9
			#)
			#return $obj->morphedByMany(
			#	$annotationForeignModel,			// 1
			#	'tablename',						// 2
			#	'sys_mm',							// 3
			#	'uid_local',						// 4
			#	'uid_foreign',						// 5
			#	'uid',								// 6
			#	'fefew'								// 7
			#);#->where('foreign_field', '=', $field);
		}
	}
	
	// Создание связей
	public function linkCreate($obj, $class, $field, $idTwo = null, $data = []){} //Todo
	
	// Удаление связей
	public function linkRemove($obj, $class, $field, $idTwo = null, $data = []){} //Todo

}