<?php
namespace Litovchenko\AirTable\Xclass;

use TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface;

class ActionUriViewHelper extends \TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper
{
    /**
     * The magic variable TYPO3 
     * Parameters are described here 
     * @var array
     */
	public static $TYPO3 = [
		'thisIs' => 'Xclass',
		'name' => '',
		'description' => '',
		'object' => 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper'
	];
	
    /**
     * Arguments initialization
     *
     * @throws \TYPO3Fluid\Fluid\Core\ViewHelper\Exception
     */
	public function initializeArguments()
	{
		parent::initializeArguments();
		$this->registerArgument('route', 'string', 'The name of the route');
	}
	
    /**
     * @param array $arguments
     * @param \Closure $renderChildrenClosure
     * @param RenderingContextInterface $renderingContext
     * @return string
     */
    public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext)
    {
		// <f:link.action route="routeExtProjiv.Pages.PageDefaultController.travelViewAction" arguments="{num:5}">--TEXT--</f:link.action>
        // <f:link.action action="travelViewAction" arguments="{num:5}">--TEXT--</f:link.action>
		// <f:link.action 
		// 		action="travelView" 
		// 		extensionName="Projiv" 
		// 		pluginName="PagesPageDefaultController"
		// 		controller="Pages\PageDefault"
		// 		arguments="{num:5}"
		// >
		//	-- TEXT --
		// </f:link.action>
		
		$arguments['action'] = preg_replace('/Action$/is','',$arguments['action']);
		if(!empty($arguments['route'])){
			preg_match('/Ext\.([^\.]*)\.([^\.]*).([^\.]*).([^\.]*)/is',$arguments['route'], $matches);
			$arguments['extensionName'] = $matches[1];
			$arguments['pluginName'] = $matches[2].'_'.$matches[3].'Controller';
			if($matches[2] == 'Pages') {
				$arguments['controller'] = $matches[2].'\\'.$matches[3];
			} elseif($matches[2] == 'Plugins') {
				$arguments['controller'] = 'PagesElements\\'.$matches[2].'\\'.$matches[3];
			}
			$arguments['action'] = preg_replace('/Action$/is','',$matches[4]);
		}
        return parent::renderStatic($arguments, $renderChildrenClosure, $renderingContext);
    }
}
